{"version":3,"sources":["user-edit.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YA0EA;gBAMI,YACY,EAAe,EACf,MAAc,EACd,cAA8B,EAC9B,WAAwB;oBAHxB,OAAE,GAAF,EAAE,CAAa;oBACf,WAAM,GAAN,MAAM,CAAQ;oBACd,mBAAc,GAAd,cAAc,CAAgB;oBAC9B,gBAAW,GAAX,WAAW,CAAa;oBATpC,UAAK,GAAG,uBAAuB,CAAC;oBAEhC,iBAAY,GAAG,IAAI,CAAC;oBAQhB,mDAAmD;oBACnD,IAAI,CAAC,UAAU,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;oBACvE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;2BAC/C,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,CAAC;oBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnB,IAAI,CAAC,KAAK,GAAG,cAAc,CAAC;oBAChC,CAAC;gBACL,CAAC;gBAED,QAAQ;oBACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CACzB;wBACI,QAAQ,EAAE,CAAC,EAAE,EAAE;gCACX,kBAAU,CAAC,QAAQ;gCACnB,kBAAU,CAAC,OAAO,CAAC,cAAc,CAAC;6BACrC,CAAC;wBACF,KAAK,EAAE,CAAC,EAAE,EAAE;gCACR,kBAAU,CAAC,QAAQ;gCACnB,kBAAU,CAAC,OAAO,CAAC,uIAAuI,CAAC;6BAC9J,CAAC;wBACF,QAAQ,EAAE,CAAC,EAAE,EAAE;gCACX,kBAAU,CAAC,QAAQ;gCACnB,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7B,eAAe,EAAE,CAAC,EAAE,EAAE;gCAClB,kBAAU,CAAC,QAAQ;gCACnB,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC7B,WAAW,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC;qBAC1B,EACD;wBACI,SAAS,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,iBAAiB,CAAC;qBAClE,CACJ,CAAC;oBAEF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBACnB,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,iBAAiB,EACtC,IAAI,mBAAW,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBAC9C,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;wBAC7C,QAAQ,CAAC,eAAe,EAAE,CAAC;wBAC3B,QAAQ,CAAC,aAAa,CAAC,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;wBAChD,IAAI,eAAe,GACf,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;wBACzC,eAAe,CAAC,eAAe,EAAE,CAAC;wBAClC,eAAe,CAAC,aAAa,CAAC,kBAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;wBAEvD,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,SAAS,CAC5B,IAAI;4BACA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC;iCACxB,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;4BAC7B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC;iCACrB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BAC1B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC;iCAC3B,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;wBACpC,CAAC,CACJ,CAAC;oBACN,CAAC;gBACL,CAAC;gBAED,gBAAgB,CAAC,GAAW,EAAE,GAAW;oBACrC,MAAM,CAAC,CAAC,KAAgB;wBACpB,IAAI,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBACnC,IAAI,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC1C,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC3C,MAAM,CAAC,IAAI,CAAC;wBAChB,CAAC;wBACD,MAAM,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;oBACnC,CAAC,CAAC;gBACN,CAAC;gBAED,QAAQ;oBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;wBAClB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;6BACpC,SAAS,CAAC,CAAC,IAAI;4BACZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gCACrB,0BAA0B;gCAC1B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gCACzB,IAAI,CAAC,WAAW,CAAC,KAAK,CAClB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC;qCAC5B,SAAS,CAAC,CAAC,IAAI;oCACZ,mBAAmB;oCACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oCACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gCAC/B,CAAC,EACD,CAAC,GAAG;oCACA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oCACjB,gBAAgB;oCAChB,IAAI,CAAC,YAAY;wCACb,wCAAwC,CAAC;gCACjD,CAAC,CAAC,CAAC;4BACX,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,uBAAuB;gCACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;4BACnC,CAAC;wBACL,CAAC,EACD,CAAC,GAAG;4BACA,0BAA0B;4BAC1B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;wBAC5B,CAAC,CAAC,CAAC;oBACX,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,IAAI,GAAG,IAAI,WAAI,CACf,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,EAC/B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,EACzB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;wBACrC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC;6BACxB,SAAS,CAAC,CAAC,IAAI;4BACZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,CAAC;gCACrB,oBAAoB;gCACpB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gCACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC/B,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACJ,iBAAiB;gCACjB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC;4BACnC,CAAC;wBACL,CAAC,EACD,CAAC,GAAG;4BACA,0BAA0B;4BAC1B,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;wBAC5B,CAAC,CAAC,CAAC;oBACX,CAAC;gBACL,CAAC;YACL,CAAC;YA3MD;gBAAC,gBAAS,CAAC;oBACP,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+DT;iBACJ,CAAC;;iCAAA;YAEF,iDAuIC,CAAA","file":"user-edit.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {Router, ActivatedRoute} from \"@angular/router\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport {User} from \"./user\";\r\n\r\n@Component({\r\n    selector: \"user-edit\",\r\n    template: `\r\n<div class=\"user-container\">\r\n    <form class=\"form-user\" [formGroup]=\"userForm\" (submit)=\"onSubmit()\">\r\n        <h2 class=\"form-user-heading\">{{title}}</h2>\r\n        <div class=\"form-group\">\r\n            <input [disabled]=\"!this.isRegister\" formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Choose an Username\" autofocus />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.username.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.username.valid && !this.userForm.controls.username.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"email\" type=\"text\" class=\"form-control\" placeholder=\"Type your e-mail address\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.email.valid\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.email.valid && !this.userForm.controls.email.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div *ngIf=\"!this.isRegister\" class=\"form-group\">\r\n            <input formControlName=\"passwordCurrent\" type=\"password\" class=\"form-control\" placeholder=\"Current Password\" />\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.passwordCurrent.valid\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                required\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Choose a Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"!this.userForm.controls.password.valid && !this.userForm.controls.password.pristine\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"passwordConfirm\" type=\"password\" class=\"form-control\" placeholder=\"Confirm your Password\" />\r\n            <span class=\"validator-label valid\" *ngIf=\"this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.password.pristine && !this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\r\n                valid!\r\n            </span>\r\n            <span class=\"validator-label invalid\" *ngIf=\"(!this.userForm.controls.passwordConfirm.valid && !this.userForm.controls.passwordConfirm.pristine) || this.userForm.hasError('compareFailed')\">\r\n                <span class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></span>\r\n                invalid\r\n            </span>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input formControlName=\"displayName\" type=\"text\" class=\"form-control\" placeholder=\"Choose a Display Name\" />\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"submit\" class=\"btn btn-primary btn-block\" [disabled]=\"!userForm.valid\" value=\"{{this.isRegister ? 'Register' : 'Save'}}\" />\r\n        </div>\r\n    </form>\r\n</div>\r\n    `\r\n})\r\n\r\nexport class UserEditComponent {\r\n    title = \"New User Registration\";\r\n    userForm: FormGroup ;\r\n    errorMessage = null;\r\n    isRegister: boolean;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private router: Router,\r\n        private activatedRoute: ActivatedRoute,\r\n        private authService: AuthService) {\r\n        // determine behaviour by fetching the active route\r\n        this.isRegister = (activatedRoute.snapshot.url[0].path === \"register\");\r\n        if ((this.isRegister && this.authService.isLoggedIn())\r\n            || (!this.isRegister && !this.authService.isLoggedIn())) {\r\n            this.router.navigate([\"\"]);\r\n        }\r\n        if (!this.isRegister) {\r\n            this.title = \"Edit Account\";\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.userForm = this.fb.group(\r\n            {\r\n                username: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-zA-Z0-9]+\")\r\n                ]],\r\n                email: [\"\", [\r\n                    Validators.required,\r\n                    Validators.pattern(\"[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\")\r\n                ]],\r\n                password: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)]],\r\n                passwordConfirm: [\"\", [\r\n                    Validators.required,\r\n                    Validators.minLength(6)]],\r\n                displayName: [\"\", null]\r\n            },\r\n            {\r\n                validator: this.compareValidator('password', 'passwordConfirm')\r\n            }\r\n        );\r\n\r\n        if (!this.isRegister) {\r\n            this.userForm.addControl(\"passwordCurrent\",\r\n                new FormControl(\"\", Validators.required));\r\n            var password = this.userForm.get(\"password\");\r\n            password.clearValidators();\r\n            password.setValidators(Validators.minLength(6));\r\n            var passwordConfirm =\r\n                this.userForm.get(\"passwordConfirm\");\r\n            passwordConfirm.clearValidators();\r\n            passwordConfirm.setValidators(Validators.minLength(6));\r\n\r\n            this.authService.get().subscribe(\r\n                user => {\r\n                    this.userForm.get(\"username\")\r\n                        .setValue(user.UserName);\r\n                    this.userForm.get(\"email\")\r\n                        .setValue(user.Email);\r\n                    this.userForm.get(\"displayName\")\r\n                        .setValue(user.DisplayName);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    compareValidator(fc1: string, fc2: string) {\r\n        return (group: FormGroup): { [key: string]: any } => {\r\n            let password = group.controls[fc1];\r\n            let passwordConfirm = group.controls[fc2];\r\n            if (password.value === passwordConfirm.value) {\r\n                return null;\r\n            }\r\n            return { compareFailed: true };\r\n        };\r\n    }\r\n\r\n    onSubmit() {\r\n        if (this.isRegister) {\r\n            this.authService.add(this.userForm.value)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // registration successful\r\n                        this.errorMessage = null;\r\n                        this.authService.login(\r\n                            this.userForm.value.username,\r\n                            this.userForm.value.password)\r\n                            .subscribe((data) => {\r\n                                // login successful\r\n                                this.errorMessage = null;\r\n                                this.router.navigate([\"\"]);\r\n                            },\r\n                            (err) => {\r\n                                console.log(err);\r\n                                // login failure\r\n                                this.errorMessage =\r\n                                    \"Warning: Username or Password mismatch\";\r\n                            });\r\n                    } else {\r\n                        // registration failure\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                });\r\n        } else {\r\n            let user = new User(\r\n                this.userForm.value.username,\r\n                this.userForm.value.password,\r\n                this.userForm.value.passwordNew,\r\n                this.userForm.value.email,\r\n                this.userForm.value.displayName);\r\n            this.authService.update(user)\r\n                .subscribe((data) => {\r\n                    if (data.error == null) {\r\n                        // update successful\r\n                        this.errorMessage = null;\r\n                        this.router.navigate([\"\"]);\r\n                    } else {\r\n                        // update failure\r\n                        this.errorMessage = data.error;\r\n                    }\r\n                },\r\n                (err) => {\r\n                    // server/connection error\r\n                    this.errorMessage = err;\r\n                });\r\n        }\r\n    }\r\n}\r\n"]}