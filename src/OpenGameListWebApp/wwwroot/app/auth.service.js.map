{"version":3,"sources":["auth.service.ts"],"names":[],"mappings":"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","file":"auth.service.js","sourcesContent":["import {Injectable, EventEmitter} from \"@angular/core\";\r\nimport {Http, Headers, Response, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {AuthHttp} from \"./auth.http\";\r\nimport {User} from \"./user\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    authKey = \"auth\";\r\n\r\n    constructor(private http: AuthHttp) {\r\n    }\r\n\r\n    login(username: string, password: string): any {\r\n        var url = \"api/connect/token\";  // JwtProvider's LoginPath\r\n\r\n        var data = {\r\n            username: username,\r\n            password: password,\r\n            client_id: \"OpenGameList\",\r\n            // required when signing up with username/password\r\n            grant_type: \"password\",\r\n            // space-separated list of scopes for which the token is issued\r\n            scope: \"offline_access profile email\"\r\n        };\r\n\r\n        return this.http.post(\r\n            url,\r\n            this.toUrlEncodedString(data),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                })\r\n            }))\r\n            .map(response => {\r\n                var auth = response.json();\r\n                console.log(\"The following auth JSON object has been received:\");\r\n                console.log(auth);\r\n                this.setAuth(auth);\r\n                return auth;\r\n            });\r\n    }\r\n\r\n    logout(): any {\r\n        return this.http.post(\r\n            \"api/Accounts/Logout\",\r\n            null)\r\n            .map(response => {\r\n                this.setAuth(null);\r\n                return true;\r\n            })\r\n            .catch(err => {\r\n                return Observable.throw(err);\r\n            });\r\n    }\r\n\r\n    // Converts a Json object to urlencoded format\r\n    toUrlEncodedString(data: any) {\r\n        var body = \"\";\r\n        for (var key in data) {\r\n            if (body.length) {\r\n                body += \"&\";\r\n            }\r\n            body += key + \"=\";\r\n            body += encodeURIComponent(data[key]);\r\n        }\r\n        return body;\r\n    }\r\n\r\n    // Persist auth into localStorage or removes it if a NULL argument is given\r\n    setAuth(auth: any): boolean {\r\n        if (auth) {\r\n            localStorage.setItem(this.authKey, JSON.stringify(auth));\r\n        }\r\n        else {\r\n            localStorage.removeItem(this.authKey);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Retrieves the auth JSON object (or NULL if none)\r\n    getAuth(): any {\r\n        var i = localStorage.getItem(this.authKey);\r\n        if (i) {\r\n            return JSON.parse(i);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Returns TRUE if the user is logged in, FALSE otherwise.\r\n    isLoggedIn(): boolean {\r\n        return localStorage.getItem(this.authKey) != null;\r\n    }\r\n\r\n    get() {\r\n        return this.http.get(\"api/Accounts\")\r\n            .map(response => <User>response.json());\r\n    }\r\n\r\n    add(user: User) {\r\n        return this.http.post(\r\n            \"api/Accounts\",\r\n            JSON.stringify(user),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            }))\r\n            .map(response => response.json());\r\n    }\r\n\r\n    update(user: User) {\r\n        return this.http.put(\r\n            \"api/Accounts\",\r\n            JSON.stringify(user),\r\n            new RequestOptions({\r\n                headers: new Headers({\r\n                    \"Content-Type\": \"application/json\"\r\n                })\r\n            }))\r\n            .map(response => response.json());\r\n    }\r\n}\r\n"]}