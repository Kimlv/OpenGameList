{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAsCA;gBAMI,YACY,EAAe,EACf,MAAc,EACd,WAAwB;oBAFxB,OAAE,GAAF,EAAE,CAAa;oBACf,WAAM,GAAN,MAAM,CAAQ;oBACd,gBAAW,GAAX,WAAW,CAAa;oBARpC,UAAK,GAAG,OAAO,CAAC;oBAChB,cAAS,GAAG,IAAI,CAAC;oBACjB,eAAU,GAAG,KAAK,CAAC;oBACnB,2BAAsB,GAAG,IAAI,CAAC;oBAM1B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,KAAK,CAAC;wBACtB,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;wBACnC,QAAQ,EAAE,CAAC,EAAE,EAAE,kBAAU,CAAC,QAAQ,CAAC;qBACtC,CAAC,CAAC;gBACP,CAAC;gBAED,YAAY,CAAC,CAAC;oBACV,CAAC,CAAC,cAAc,EAAE,CAAC;oBACnB,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAC7C,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;oBAC7C,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC;yBACrC,SAAS,CAAC,CAAC,IAAI;wBACZ,mBAAmB;wBACnB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;wBACxB,IAAI,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;wBACtC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;wBAC5C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC/B,CAAC,EACD,CAAC,GAAG;wBACA,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjB,gBAAgB;wBAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC3B,CAAC,CAAC,CAAC;gBACX,CAAC;gBAED,UAAU;oBACN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACvC,CAAC;gBAED,iBAAiB,CAAC,YAAoB;oBAClC,IAAI,GAAG,GAAG,6BAA6B,GAAG,YAAY,CAAC;oBACvD,sCAAsC;oBACtC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,IAAI,IAAI,CAAC,GAAG,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC;oBACrD,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;oBACrD,IAAI,MAAM,GAAG,iDAAiD,GAAG,CAAC,GAAG,WAAW,GAAG,CAAC,CAAC;oBACrF,2CAA2C;oBAC3C,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;wBAC9B,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;oBACxC,CAAC;oBACD,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;gBACtF,CAAC;YACL,CAAC;YApFD;gBAAC,gBAAS,CAAC;oBACP,QAAQ,EAAE,OAAO;oBACjB,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BT;iBACJ,CAAC;;8BAAA;YAEF,2CAmDC,CAAA","file":"login.component.js","sourcesContent":["import {Component} from \"@angular/core\";\r\nimport {FormBuilder, Validators} from \"@angular/forms\";\r\nimport {Router} from \"@angular/router\";\r\nimport {AuthService} from \"./auth.service\";\r\n\r\n@Component({\r\n    selector: \"login\",\r\n    template: `\r\n<div class=\"login-container\">\r\n    <h2 class=\"form-login-heading\">Login</h2>\r\n    <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"loginError\">\r\n        <strong>Warning:</strong> Username or Password mismatch\r\n    </div>\r\n    <form class=\"form-login\" [formGroup]=\"loginForm\" (submit)=\"performLogin($event)\">\r\n        <input formControlName=\"username\" type=\"text\" class=\"form-control\" placeholder=\"Your username or e-mail address\" required autofocus />\r\n        <input formControlName=\"password\" type=\"password\" class=\"form-control\" placeholder=\"Your password\" required />\r\n        <div class=\"checkbox\">\r\n            <label>\r\n                <input type=\"checkbox\" value=\"remember-me\">\r\n                Remember me\r\n            </label>\r\n        </div>\r\n        <button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n    </form>\r\n    <div class=\"register-link\">\r\n        Don't have an account yet?\r\n        <a (click)=\"onRegister()\">Click here to register!</a>\r\n    </div>\r\n    <button class=\"btn btn-sm btn-default btn-block\" type=\"submit\" (click)=\"callExternalLogin('Facebook')\">\r\n        Login with Facebook\r\n    </button>\r\n    <button class=\"btn btn-sm btn-default btn-block\" type=\"submit\" (click)=\"callExternalLogin('Google')\">\r\n        Login with Google\r\n    </button>\r\n</div>\r\n    `\r\n})\r\n\r\nexport class LoginComponent {\r\n    title = \"Login\";\r\n    loginForm = null;\r\n    loginError = false;\r\n    externalProviderWindow = null;\r\n\r\n    constructor(\r\n        private fb: FormBuilder,\r\n        private router: Router,\r\n        private authService: AuthService) {\r\n        this.loginForm = fb.group({\r\n            username: [\"\", Validators.required],\r\n            password: [\"\", Validators.required]\r\n        });\r\n    }\r\n\r\n    performLogin(e) {\r\n        e.preventDefault();\r\n        var username = this.loginForm.value.username;\r\n        var password = this.loginForm.value.password;\r\n        this.authService.login(username, password)\r\n            .subscribe((data) => {\r\n                // login successful\r\n                this.loginError = false;\r\n                var auth = this.authService.getAuth();\r\n                alert(\"Our Token is: \" + auth.access_token);\r\n                this.router.navigate([\"\"]);\r\n            },\r\n            (err) => {\r\n                console.log(err);\r\n                // login failure\r\n                this.loginError = true;\r\n            });\r\n    }\r\n\r\n    onRegister() {\r\n        this.router.navigate([\"register\"]);\r\n    }\r\n\r\n    callExternalLogin(providerName: string) {\r\n        var url = \"api/Accounts/ExternalLogin/\" + providerName;\r\n        // minimalistic mobile devices support\r\n        var w = (screen.width >= 1050) ? 1050 : screen.width;\r\n        var h = (screen.height >= 550) ? 550 : screen.height;\r\n        var params = \"toolbar=yes,scrollbars=yes,resizable=yes,width=\" + w + \", height=\" + h;\r\n        // close previously opened windows (if any)\r\n        if (this.externalProviderWindow) {\r\n            this.externalProviderWindow.close();\r\n        }\r\n        this.externalProviderWindow = window.open(url, \"ExternalProvider\", params, false);\r\n    }\r\n}\r\n"]}